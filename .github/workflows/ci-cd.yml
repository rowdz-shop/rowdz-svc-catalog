name: ci-cd-backend
on:
  push:
    branches: [ main ]
    paths: [ "src/**", "pom.xml", "Dockerfile", ".github/workflows/**" ]
  pull_request:
    branches: [ main ]
concurrency: { group: backend-ci, cancel-in-progress: true }
permissions:
  contents: read
  id-token: write
jobs:
  build-test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-java@v4
        with: { distribution: temurin, java-version: '21' }
      - uses: actions/cache@v4
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
      - run: mvn -B -q verify

  docker-deploy:
    needs: build-test
    if: github.ref == 'refs/heads/main' && vars.DEPLOY_ENABLED == 'true'
    runs-on: ubuntu-latest
    environment: dev
    steps:
      - uses: actions/checkout@v4
      - name: Configure AWS credentials (OIDC)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: ${{ vars.AWS_REGION }}
      - name: Login to ECR
        uses: aws-actions/amazon-ecr-login@v2
      - name: Build & Push image
        id: img
        run: |
          IMAGE_TAG=${GITHUB_SHA::7}
          ECR=${{ vars.AWS_ACCOUNT_ID }}.dkr.ecr.${{ vars.AWS_REGION }}.amazonaws.com/${{ vars.ECR_REPO }}
          docker build -t $ECR:$IMAGE_TAG .
          docker push $ECR:$IMAGE_TAG
          echo "image=$ECR:$IMAGE_TAG" >> $GITHUB_OUTPUT
      - name: Update ECS service
        uses: aws-actions/amazon-ecs-deploy-task-definition@v2
        with:
          task-definition: ${{ vars.ECS_TASK_DEF }}
          service: ${{ vars.ECS_SERVICE }}
          cluster: ${{ vars.ECS_CLUSTER }}
          container-name: ${{ vars.ECS_CONTAINER_NAME }}
          image: ${{ steps.img.outputs.image }}